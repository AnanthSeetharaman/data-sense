
import type { DataAsset } from '@/lib/types';

export const mockDataAssets: DataAsset[] = [
  {
    id: 'hive-table-1',
    source: 'Hive',
    name: 'customer_data',
    location: 'prod_db.sales_schema.customer_data',
    columnCount: 12,
    sampleRecordCount: 1500000,
    description: 'Contains detailed information about customers, including demographics and purchase history. Updated nightly.',
    tags: ['customer', 'sales', 'PII', 'nightly_etl'],
    schema: [
      { name: 'customer_id', type: 'INT', nullable: false, description: 'Unique identifier for the customer.' },
      { name: 'first_name', type: 'STRING', nullable: true, description: 'Customer\'s first name.' },
      { name: 'last_name', type: 'STRING', nullable: true, description: 'Customer\'s last name.' },
      { name: 'email', type: 'STRING', nullable: true, description: 'Customer\'s email address.' },
      { name: 'registration_date', type: 'TIMESTAMP', nullable: true, description: 'Date of customer registration.' },
      { name: 'total_spent', type: 'DECIMAL(10,2)', nullable: true, description: 'Total amount spent by customer.' },
      { name: 'last_purchase_date', type: 'DATE', nullable: true, description: 'Date of last purchase.' },
      { name: 'country', type: 'STRING', nullable: true, description: 'Customer\'s country of residence.' },
      { name: 'city', type: 'STRING', nullable: true, description: 'Customer\'s city of residence.' },
      { name: 'zip_code', type: 'STRING', nullable: true, description: 'Customer\'s zip code.' },
      { name: 'is_active', type: 'BOOLEAN', nullable: false, description: 'Indicates if customer account is active.' },
      { name: 'notes', type: 'STRING', nullable: true, description: 'Additional notes about the customer.' },
    ],
    owner: 'Sales Team',
    businessGlossaryTerms: ['Customer Profile', 'Purchase Data'],
    isSensitive: true,
    lastModified: '2024-05-20T10:00:00Z',
    rawSchemaForAI: 'customer_id:INT, first_name:STRING, last_name:STRING, email:STRING, registration_date:TIMESTAMP, total_spent:DECIMAL, last_purchase_date:DATE, country:STRING, city:STRING, zip_code:STRING, is_active:BOOLEAN, notes:STRING',
    sampleData: [ // This will be used for "PG (Mocked)" source
      { customer_id: 1, first_name: 'John', email: 'john.doe@example.com', total_spent: 125.50, country: 'USA' },
      { customer_id: 2, first_name: 'Jane', email: 'jane.smith@example.com', total_spent: 250.75, country: 'Canada' },
      { customer_id: 3, first_name: 'Alice', email: 'alice.w@example.com', total_spent: 99.00, country: 'UK' },
    ],
    csvPath: '/sample_data/customer_data.csv',
    rawQuery: 'SELECT * FROM prod_db.sales_schema.customer_data LIMIT 100;',
  },
  {
    id: 'adls-file-2',
    source: 'ADLS',
    name: 'product_catalog_latest.parquet',
    location: 'datalake-bronze/product_data/product_catalog_latest.parquet',
    columnCount: 8,
    sampleRecordCount: 5000,
    description: 'Parquet file containing the latest product catalog information, including pricing and stock levels.',
    tags: ['product', 'catalog', 'inventory', 'parquet'],
    schema: [
      { name: 'product_id', type: 'BIGINT', nullable: false, description: 'Unique identifier for the product.' },
      { name: 'product_name', type: 'STRING', nullable: true, description: 'Name of the product.' },
      { name: 'category', type: 'STRING', nullable: true, description: 'Product category.' },
      { name: 'price', type: 'DOUBLE', nullable: true, description: 'Product price.' },
      { name: 'stock_quantity', type: 'INT', nullable: true, description: 'Current stock quantity.' },
      { name: 'supplier_id', type: 'INT', nullable: true, description: 'Identifier for the product supplier.' },
      { name: 'date_added', type: 'DATE', nullable: true, description: 'Date the product was added to catalog.' },
      { name: 'is_discontinued', type: 'BOOLEAN', nullable: false, description: 'Indicates if product is discontinued.' },
    ],
    owner: 'Supply Chain Team',
    businessGlossaryTerms: ['Product Information', 'Stock Levels'],
    lastModified: '2024-05-21T14:30:00Z',
    rawSchemaForAI: 'product_id:BIGINT, product_name:STRING, category:STRING, price:DOUBLE, stock_quantity:INT, supplier_id:INT, date_added:DATE, is_discontinued:BOOLEAN',
    sampleData: [
      { product_id: 101, product_name: 'SuperWidget', category: 'Widgets', price: 19.99, stock_quantity: 150 },
      { product_id: 102, product_name: 'MegaGadget', category: 'Gadgets', price: 49.50, stock_quantity: 75 },
    ],
    csvPath: '/sample_data/product_catalog_latest.csv',
    rawQuery: '-- ADLS query depends on access method (e.g., SparkSQL, Pandas)\n-- Example: spark.read.parquet("abfss://container@account.dfs.core.windows.net/path/to/product_catalog_latest.parquet").limit(100).show()',
  },
  {
    id: 'snowflake-view-3',
    source: 'Snowflake',
    name: 'vw_monthly_sales_summary',
    location: 'REPORTING_DB.FINANCE_VIEWS.vw_monthly_sales_summary',
    columnCount: 5,
    description: 'View summarizing monthly sales figures, aggregated by product category and region.',
    tags: ['sales', 'finance', 'reporting', 'view', 'summary'],
    schema: [
      { name: 'sales_month', type: 'DATE', nullable: false, description: 'Month of sales aggregation (first day of month).' },
      { name: 'product_category', type: 'VARCHAR', nullable: true, description: 'Category of the product.' },
      { name: 'region', type: 'VARCHAR', nullable: true, description: 'Sales region.' },
      { name: 'total_sales_amount', type: 'NUMBER(38,2)', nullable: true, description: 'Total sales amount for the month, category, and region.' },
      { name: 'transaction_count', type: 'INTEGER', nullable: true, description: 'Number of transactions.' },
    ],
    owner: 'Finance Department',
    lastModified: '2024-05-22T09:00:00Z',
    rawSchemaForAI: 'sales_month:DATE, product_category:VARCHAR, region:VARCHAR, total_sales_amount:NUMBER, transaction_count:INTEGER',
    sampleData: [
      { sales_month: '2024-04-01', product_category: 'Electronics', region: 'North America', total_sales_amount: 120500.75, transaction_count: 850 },
      { sales_month: '2024-04-01', product_category: 'Books', region: 'Europe', total_sales_amount: 45200.00, transaction_count: 1200 },
    ],
    csvPath: '/sample_data/vw_monthly_sales_summary.csv',
    rawQuery: 'SELECT * FROM REPORTING_DB.FINANCE_VIEWS.vw_monthly_sales_summary ORDER BY sales_month DESC LIMIT 100;',
  },
  {
    id: 'hive-logs-4',
    source: 'Hive',
    name: 'application_logs_raw',
    location: 'staging_db.logs.application_logs_raw',
    columnCount: 7,
    sampleRecordCount: 10000000,
    description: 'Raw application logs collected for debugging and analysis. Partitioned by date.',
    tags: ['logs', 'application', 'raw_data', 'debugging'],
    schema: [
      { name: 'log_timestamp', type: 'TIMESTAMP', nullable: false },
      { name: 'service_name', type: 'STRING', nullable: true },
      { name: 'log_level', type: 'STRING', nullable: true },
      { name: 'thread_id', type: 'STRING', nullable: true },
      { name: 'message', type: 'STRING', nullable: true },
      { name: 'exception_details', type: 'STRING', nullable: true },
      { name: 'dt', type: 'DATE', nullable: false, description: 'Partition column for date.' },
    ],
    owner: 'DevOps Team',
    lastModified: '2024-05-23T00:00:00Z', // Updated continuously
    rawSchemaForAI: 'log_timestamp:TIMESTAMP, service_name:STRING, log_level:STRING, thread_id:STRING, message:STRING, exception_details:STRING, dt:DATE',
    sampleData: [
        { log_timestamp: '2024-05-23T10:00:05Z', service_name: 'auth-service', log_level: 'INFO', message: 'User login successful', exception_details: null, dt: '2024-05-23' },
        { log_timestamp: '2024-05-23T10:01:15Z', service_name: 'payment-service', log_level: 'ERROR', message: 'Payment processing failed', exception_details: 'TimeoutException', dt: '2024-05-23' },
    ],
    csvPath: '/sample_data/application_logs_raw.csv',
    rawQuery: "SELECT * FROM staging_db.logs.application_logs_raw WHERE dt = '2024-05-22' LIMIT 100;",
  },
  {
    id: 'adls-images-5',
    source: 'ADLS',
    name: 'marketing_campaign_images',
    location: 'datalake-gold/marketing/campaign_assets/images/',
    columnCount: 0, 
    description: 'Directory containing images used in various marketing campaigns. Files are JPEGs and PNGs.',
    tags: ['marketing', 'images', 'assets', 'campaigns'],
    schema: [ // This schema describes the *metadata* of the files, not the image content itself
      { name: 'file_name', type: 'STRING', nullable: false },
      { name: 'file_type', type: 'STRING', nullable: true },
      { name: 'size_kb', type: 'INT', nullable: true },
      { name: 'upload_date', type: 'TIMESTAMP', nullable: true },
    ],
    owner: 'Marketing Team',
    lastModified: '2024-05-15T12:00:00Z',
    rawSchemaForAI: 'file_name:STRING, file_type:STRING, size_kb:INT, upload_date:TIMESTAMP (schema inferred for listing, not content)',
    sampleData: [ // Sample metadata, as this isn't tabular data in the same way
        { file_name: 'summer_promo_banner.jpg', file_type: 'JPEG', size_kb: 1200, upload_date: '2024-05-10T09:30:00Z' },
        { file_name: 'logo_variant_dark.png', file_type: 'PNG', size_kb: 55, upload_date: '2024-04-20T15:00:00Z' },
    ],
    csvPath: '/sample_data/marketing_campaign_images.csv',
    rawQuery: '-- List files in ADLS directory: dbutils.fs.ls("abfss://container@account.dfs.core.windows.net/path/to/images/")',
  },
];

export const findDataAssetById = (id: string): DataAsset | undefined => {
  return mockDataAssets.find(asset => asset.id === id);
};
